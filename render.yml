# Render blueprint file for deploying multiple services
services:
  - type: web
    name: sts-app
    env: docker
    dockerfilePath: ./docker-files/node/Dockerfile
    envFile: .env
    startCommand: npm start
    envVars:
      - key: NODE_ENV
        value: production
    ports:
      - name: http
        port: 3000
    healthCheckPath: /
    buildCommand: docker build -t sts-app -f ./docker-files/node/Dockerfile .
    dependsOn:
      - name: sts-db

  - type: web
    name: sts-nginx-webserver
    env: docker
    dockerfilePath: ./docker-files/nginx/Dockerfile
    startCommand: nginx -g "daemon off;"
    ports:
      - name: http
        port: 80
    buildCommand: docker build -t sts-nginx-webserver -f ./docker-files/nginx/Dockerfile .
    envVars:
      - key: PORT
        value: 80
    dependsOn:
      - name: sts-app

  - type: database
    name: sts-db
    databaseName: ${DB_DATABASE}
    user: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    engine: mysql
    version: 8.0
    disk:
      name: mysql-data
      sizeGB: 10
    envVars:
      - key: MYSQL_ROOT_PASSWORD
        value: ${DB_PASSWORD}
      - key: MYSQL_DATABASE
        value: ${DB_DATABASE}
      - key: MYSQL_USER
        value: ${DB_USERNAME}
      - key: MYSQL_PASSWORD
        value: ${DB_PASSWORD}
    startCommand: mysqld
    ports:
      - name: mysql
        port: 3306

  - type: web
    name: sts-dbms
    env: docker
    image: adminer:latest
    startCommand: docker run -d -p ${ADMINER_PORT}:8080 adminer
    ports:
      - name: adminer
        port: 8080
    envVars:
      - key: ADMINER_DEFAULT_SERVER
        value: db

  - type: redis
    name: sts-redis
    image: redis:alpine
    startCommand: redis-server
    ports:
      - name: redis
        port: 6379
    envFile: .env
    disk:
      name: redis-data
      sizeGB: 1
